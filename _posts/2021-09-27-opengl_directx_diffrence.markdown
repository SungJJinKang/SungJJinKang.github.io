---
layout: post
title:  "OpenGL과 DirectX 차이"
date:   2021-09-26
categories: ComputerScience ComputerGraphics
---

OpenGL과 DirectX 둘은 무엇이 다를까?           
윈도우 플랫폼 전용이다 플랫폼 독립적이다 이런 것들은 제외하고,          
프로그래머 입장에서 보면 이 **둘의 차이는 하드웨어 리소스를 어떻게, 누가 관리하냐**이다.        

**OpenGL**의 경우 텍스쳐나 버텍스 데이터, 커맨드 버퍼와 같은 **리소스들의 관리를 대부분 Driver단에서 대신해준다.** 그러니 어플리케이션 개발자는 편하다.          
반면 **DirectX**는 이러한 **리소스 관리를 어플리케이션단에서 직접해야한다.**                  

언뜻보면 OpenGL이 어플리케이션 개발자가 신경쓸 일이 덜한 것 같지만 그 만큼 성능상 최적화할 수 있는 부분이 덜하다.         
뭔 말이냐면 **DirectX의 경우 리소스 관리를 직접 자유자재로 할 수 있으니 GPU가 어떻게 돌아가는지만 잘 이해하고 있으면 그 만큼 성능상 최적화를 할 수 있다**는 것이다.         

예를 들면 커맨드 배칭을 들 수 있다. DirectX는 OpenGL과 달리 어플리케이션단에서 커맨드들을 여러개 모아서 한번에 GPU에 보낼 수 있다. 이것이 어떤 장점이 있는지를 알려면 메모리와 GPU 사이의 데이터를 전송하는데 쓰이는 PCI-E 버스에 대해 알아야하는데, **PCI-E 버스의 특징은 대역폭은 큰데 반해 그만큼 레이턴시가 길다**는 것이다. 이 말은 PCI-E 버스를 통해 데이터를 전송할 때는 조금 조금씩 데이터를 보내기 보다는 되도록이면 **데이터를 한꺼번에 모아서 PCI-E 버스를 꽉꽉 채워서 데이터를 전송하는 것이 성능상 유리**하다는 것이다.         
물론 OpenGL도 유저 모드단에서 커맨드버퍼가 있어서 커맨드를 모아서 전송하지만 커맨드 버퍼가 꽉차지 않아도 주기적으로 GPU에 데이터에 전송이 된다. ( 정확히는 유저 모드단에서 커맨드 버퍼에 데이터를 모아두면 커널 모드에서 이걸 가져가서 DMA가 GPU로 전송하는 방식이다. )
그래서 **DirectX는 개발자가가 원하는만큼 커맨드를 어플리케이션단 ( 유저모드 단 )에서 모을 수 있게 지원을 하고 원하는 시점에 GPU에 보낼 수 있다.       

더 자세히 알고 싶다면 [이 글1](https://docs.microsoft.com/en-us/windows/win32/direct3d10/d3d10-graphics-programming-guide-resources-mapping)과 [이 글2](https://docs.microsoft.com/ko-kr/windows/win32/direct3d12/recording-command-lists-and-bundles)을 읽어보기 바란다.         

------------------------       


최근에는 OpenGL 진영에서도 이러한 OpenGL의 성능상 문제를 해결하기 위해 리소스 관리를 직접할 수 있는 Vulkan을 밀고있다. 근데 잘 되는 것 같지는 않다. 안드로이드나 애플 진영에서도 각자의 API를 밀고 있다보니 Vulkan이 설 진영이 점차 없어지고 있다. 둠과 같은 게임도 예전에는 플랫폼에 종속되지 않기 위해 OpenGL을 사용했지만 최근에는 윈도우쪽에서는 DirectX로 넘어간 것 같다.        