---
layout: post
title:  "Unreal Engine 블루프린트가 상대적으로 느린 이유?"
date:   2022-02-26
categories: UnrealEngine4 UE4 ComputerScience ComputerGraphics
---

**C++ 네이티브 코드**의 경우 **컴파일러단에서 최적화** ( 인라이닝, 레지스터 재할당, SIMD 레지스터 활용 등등..... )가 많이 들어감. CPU는 그 기계어를 곧바로 실행          

반면 **블루프린트**의 경우 바이트 코드로 빌드에 담겨서 **런타임에 언리얼의 Virtual Machine에 의해 동작**되기 때문에 컴파일러만큼의 최적화가 불가능. 결국 **런타임에 매번 바이트 코드를 명령어 코드로 변환해서 실행**해야함 ( 자바 생각하면 된다. ) ( 블루프린트를 빌드 타임에 네이티브 코드로 변환해서 빌드에 넣어주는 기능이 있는데 이건 조금 더 자료 조사가 필요 )                   

블루프린트의 경우에도 가상 머신단에서 C++ 네이티브 코드로 점프를 해서 네이티브 코드로 돌기도 하지만 ( 수학 관련 코드는 결국 SIMD 레지스터를 활용해야하기 때문에 VM에서 C++ 네이티브 코드를 호출하는 방식을 사용 ) 결국 중간에 Helper 코드를 두어서 가상 머신에서 그 Helper 코드를 거쳐서 C++ 네이티브로 코드로 가야하기 때문에 오버헤드는 불가피함.               

아래의 사진은 왼쪽의 블루프린트 바이트코드에서, 오른쪽 위의 블루프린트와 C++ 네이티브 코드( MakeVector 함수 ) 사이의 중간 Helper 함수를 거쳐서, C++ 네이티브 코드 ( MakeVector 함수 )를 호출하는 것을 보여줌.                

<img width="688" alt="20220226163602" src="https://user-images.githubusercontent.com/33873804/155834652-ccf44fe9-10db-45c3-a45d-d9c4d7dab530.png">           

위와 같은 블루프린트의 단점이 있지만 결국 **개발 효율성 측면에서 블루프린트의 개발 속도를 무시할 수 없음.**          
기획자나 아티스트가 간단한 코드를 직접 짜서 불필요한 시간 낭비를 줄임.                  
그리고 한 프레임 몇번 호출안되는 코드는 그냥 조금 느려도 상관 없기 때문에 여러 곳에서 호출되는 프로젝트의 핵심 코드가 아닌 경우 블루프린트를 사용해도 괜찮음.         

references : [Blueprints vs. C++: How They Fit Together and Why You Should Use Both](https://youtu.be/VMZftEVDuCE)                 