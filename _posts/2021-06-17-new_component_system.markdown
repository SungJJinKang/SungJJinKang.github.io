---
layout: post
title:  "새로운 컴포넌트 시스템 구상 ( 작성 예정 )"
date:   2021-06-17
categories: C++
---

현재는 엔티티의 각 컴포넌트들이 new로 매번 새롭게 할당된다.           
이는 **new를 호출할 때도 느리고( 경우에 따라 OS에 페이지 요청 ), iteration시 Cache (!!!!!)) 불리하다.**        

그래서 새로운 시스템은 Entity 클래스 내에 아예 컴포넌트를 위한 일정 크기의 메모리를 스택 영역에 미리 할당한다.      
Small size optimization인 것이다.(컴포넌트가 많아지면 힙으로 옮김)            
그리고 새로운 컴포넌트가 추가되면 memory alignment 고려해서 새로운 컴포넌트가 할당될 위치를 정해주고 allocator::Construct로 할당 없이 생성자만 호출해주면 된다.      
또한 컴포넌트를 삭제할 때도 Deallocate를 하지말고 소멸자만 호출해준다.        

이게 가능한 이유가 엔티티 클래스에서 추가되거나 삭제되는 컴포넌트를 전부 관리할 수 있기 때문에 할당 없이 생성자, 소멸자만 호출할 수 있는 것이다.           

그럼 각 컴포넌트들의 위치는 어떻게 관리하냐?         
vector 하나 만들어서 컴포넌트들의 위치만 저장하면 된다.        

그리고 중간에 컴포넌트가 빠지면 그건 Free block list 처럼 중간의 빈 공간의 위치와 사이즈를 linked list로 관리해서 다음에 새로운 컴포넌트 추가 될 때 고려해서 위치를 정해주면 된다.             

이렇게 디자인을 하면 컴포넌트를 추가할 때 **매번 메모리를 할당 받을 필요도 없고**, **컴포넌트들이 연속되어 있기 때문에 Cache 측면에서 유리하고**, 컴포넌트의 개수가 작아서 **Small size optimization에 들어가면 원래 작업하던 스택 영역에 컴포넌트가 있으니 Cache 측면에서 유리**하다.                
