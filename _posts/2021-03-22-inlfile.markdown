---
layout: post
title:  "c++에서 inl파일의 의미"
date:   2021-03-22
categories: C++
---

C++ 오픈소스 프로젝트를 공부하다 보면 종종 inl파일을 자주 보는 경우가 많다. 항상 이게 무슨 특별한 기능을 하지 않나 궁금하고는 하였다. 그래서 공부해보니 정말 별 의미가 없는 것이 있다.        

템플릿 클래스를 작성하거나 인라인 함수를 작성하며 대개 definition을 헤더파일에 넣는다.    
그런데 **헤더파일안에 declaration이랑 definition이 함께 들어가 있으면 가독성이 매우 떨어지게 된다. 그래서 생각한게 다른 파일에 definition을 적어주고 그냥 헤더의 마지막에 include해버리는 것이다.** #include는 그냥 해당 파일을 copy and paste를 한다는 의미다. 다른 의미없다.    

그렇다고 이 definition을 모은 파일의 확장자를 cpp로 해버리면 컴파일러가 컴파일을 해버린다 (declaration이 없으니 당연히 컴파일 에러가 뜰 것이다). 컴파일이 필요없는 데도 불구하고 말이다. 그래서 컴파일러가 컴파일을 하지 않는 확장자로 셋팅을 한 것이다. 파일 확장자는 원하는 아무거나 해도된다. classA.korea도 가능하다.

아래의 경우는 inl로 따로 definition을 구분하지 않았을 때 inline 함수의 definition을 그냥 헤더에 넣어버린 경우이다. 함수의 종류가 엄청 많다고 생각해보면 가독성이 매우 떨어질 것이다.
```c++
classA.h

class A
{
private:
    inline void function();
}
A::function()
{
    ~~~
}
```

아래와 같이 쓰는 건 더 최악이다. ( 하지만 내 프로젝트에서 아래와 같이 되어 있는 파일들이 많다.....)
```c++
classA.h

class A
{
private:
    inline void function()
    {
    ~~~
    }
}
```

이제 definition을 다른 파일로 구분시켜주어서 가독성을 높여보자. ( 아래의 경우는 함수가 하나 밖에 없지만 함수가 매우 많다고 생각해보자. definition을 구분하지 않았을 시 얼마나 코드 가독성이 떨어질지 )
```c++
classA.h

class A
{
private:
    inline void function();
}

#include "classA.inl"

---------
classA.inl

A::function()
{
    ~~~
}
```