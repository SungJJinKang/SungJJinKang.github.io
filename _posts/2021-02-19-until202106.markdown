---
layout: post
title:  "2021학년도 1학기 동안 읽어보거나 공부할 것들"
date:   2021-02-19
categories: ComputerScience
---

책, 텍스트 자료 :   

컴퓨터 구조 및 설계 ( David A. Patterson )   
Operating Sytem Concepts ( ABRAHAM SILBERSCHATZ, ... )   
Fundamentals of Computer Graphics ( Steve Marschner, ...)   

~~[3D Collision](https://gdbooks.gitbooks.io/3dcollisions/content/)~~      
~~[Raycast에 대한 아주 기본적인 이해](https://www.scratchapixel.com/lessons/3d-basic-rendering/minimal-ray-tracer-rendering-simple-shapes/ray-box-intersection)~~     
~~[Dynamic BVH](https://box2d.org/files/ErinCatto_DynamicBVH_GDC2019.pdf)~~           
[Collision Query](https://docs.unity3d.com/Packages/com.unity.physics@0.3/manual/collision_queries.html)       

[C++ 표준 stl이 왜 구린가?? EASTL의 장점](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2271.html#better_allocator_model)       
[EASTL Allocator](http://ohyecloudy.com/pnotes/archives/250/)       
[Memory Allocator, Memory Pooling 1](http://ohyecloudy.com/pnotes/archives/250/)      
[Memory Allocator, Memory Pooling 2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1850.pdf)       
[Memory Allocator, Memory Pooling 3](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2271.html)     

[Game Engine Architecture](https://homepages.fhv.at/thjo/lecturenotes/sysarch/game-engine-architecture.html)      
[Graphics Pipline](https://fgiesen.wordpress.com/2011/07/09/a-trip-through-the-graphics-pipeline-2011-index/)       

[Occulusion culling 1](https://youtu.be/TG308pW0GY8)        
[Occulusion culling 3](https://developer.nvidia.com/gpugems/gpugems2/part-i-geometric-complexity/chapter-6-hardware-occlusion-queries-made-useful)      
[Occulusion culling 4](http://developer.download.nvidia.com/books/HTML/gpugems/gpugems_ch29.html)     
[Occulusion culling 5](https://mkblog.co.kr/2019/09/24/gpu-occlusion-culling-early-z-vs-occlusion-queries/)      
[Occulusion culling 5](https://megayuchi.com/2017/10/27/5068/)         

[Frustum culling 0](https://cgvr.informatik.uni-bremen.de/teaching/cg_literatur/lighthouse3d_view_frustum_culling/index.html)       
[Frustum culling 1](https://www.braynzarsoft.net/viewtutorial/q16390-34-aabb-cpu-side-frustum-culling)       
[Frustum culling 2](https://fgiesen.wordpress.com/2010/10/17/view-frustum-culling/)       
[How To Make FrustumCulling Faster](https://www.gamedev.net/forums/topic/626778-whats-out-there-fast-frustum-culling/)         

[Realtime Ray Tracing and Interactive Global Illumination, Ingo Wald, 2004](http://www.sci.utah.edu/~wald/PhD/wald_phd.pdf)

[Performance Optimization, SIMD and Cache](https://youtu.be/Nsf2_Au6KxU)        
[File mapping](https://docs.microsoft.com/en-us/windows/win32/memory/file-mapping)      
[GCC always assumes aligned pointer accesses](https://trust-in-soft.com/blog/2020/04/06/gcc-always-assumes-aligned-pointer-accesses/)            

[ntrinsics: Low-level engine development with Burst - Unite Copenhagen](https://youtu.be/BpwvXkoFcp8)                  

[Memory Alignment1](https://stackoverflow.com/questions/381244/purpose-of-memory-alignment)
[Memory Alignment2](https://developer.ibm.com/technologies/systems/articles/pa-dalign/)             
[Gallery of Processor Cache Effects](http://igoro.com/archive/gallery-of-processor-cache-effects/)          


영상 :   

[원신 렌더링 기법들](https://youtu.be/00QugD5u1CU)      
[CppCon 2016: Nicolas Fleury “Rainbow Six Siege: Quest for Performance"](https://www.youtube.com/watch?v=tD4xRNB0M_Q)   
[CppCon 2014: Nicolas Fleury "C++ in Huge AAA Games"](https://youtu.be/qYN6eduU06s)   
[Mathieu Ropert “This Videogame Programmer Used the STL and You Will Never Guess What Happened Next”](https://youtu.be/6hC9IxqdDDw)   
[CppCon 2016: Jason Jurecka “Game engine using STD C++ 11"](https://youtu.be/8AjRD6mU96s)    
[The most important talk on programming by Jonathan Blow](https://youtu.be/dS6rCaDSwW8)    
[How to succeed in the games industry - Programming tips from Jonathan Blow](https://youtu.be/RLI1VyPpRd8)    

~~다 본것들은 줄 그어주자..~~   
많아 보이지만 웹페이지 같은 것들은 몇시간이면 다 읽을 수 있는 정도의 분량이다.   
비대면 수업도 많아서 짬짬히 시간내서 보자!!.